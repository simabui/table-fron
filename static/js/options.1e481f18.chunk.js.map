{"version":3,"sources":["components/Options/Options.module.css","components/Checkbox/Checkbox.js","components/Select/Select.js","components/Options/Options.js"],"names":["module","exports","form","row","disabledInput","cell","Checkbox","React","forwardRef","_ref","ref","option","onChange","checked","name","react_default","a","createElement","FormControlLabel","control","color","label","value","useStyles","makeStyles","theme","formControl","margin","spacing","width","fontSize","Select","type","options","handleSelect","reset","_useState","useState","Object","defineProperty","_useState2","slicedToArray","types","setTypes","_useState4","_useState5","check","setCheck","classes","useEffect","arr","callback","obj","forEach","item","setDefaultSelect","handleChange","e","_e$target","target","checkName","objectSpread","concat","toConsumableArray","filter","id","Fragment","FormControl","className","InputLabel","Select_Select","labelId","map","components_Checkbox_Checkbox","key","filterDuplicate","elem","index","array","indexOf","INITIAL_STATE","publicationType","termType","reportGroup","reportState","reportFormat","Options","stat","handleFilter","setForm","_useState3","setReset","publicationTypes","data","termTypes","reportGroups","reportStates","reportFormats","onSubmit","preventDefault","css","Row","style","justifyContent","alignItems","Col","xs","sm","md","components_Select_Select","textAlign","Button","variant"],"mappings":"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","file":"static/js/options.1e481f18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Options_form__2IFRl\",\"row\":\"Options_row__2xRvD\",\"disabledInput\":\"Options_disabledInput__1L5is\",\"cell\":\"Options_cell__2lHRJ\"};","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MaterialCheckbox from '@material-ui/core/Checkbox';\nimport PropTypes from 'prop-types';\n\nconst Checkbox = React.forwardRef(\n  ({ option, onChange, checked, name }, ref) => {\n    return (\n      <div ref={ref}>\n        <FormControlLabel\n          control={\n            <MaterialCheckbox\n              onChange={onChange}\n              color=\"primary\"\n              name={name}\n              checked={checked}\n            />\n          }\n          label={option}\n          value={option}\n        />\n      </div>\n    );\n  },\n);\n\nCheckbox.propTypes = {\n  option: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  checked: PropTypes.bool,\n};\n\nexport default Checkbox;\n","/* eslint-disable no-use-before-define */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport MaterialSelect from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Checkbox from '../Checkbox/Checkbox';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    width: '100%',\n  },\n  label: {\n    fontSize: 13,\n  },\n}));\n\nconst Select = ({ type, name, options, handleSelect, reset }) => {\n  const [types, setTypes] = useState({ [type]: [] });\n  const [check, setCheck] = useState({});\n  const classes = useStyles();\n\n  useEffect(() => {\n    // setDefaultSelect(options, setCheck);\n  }, []);\n\n  // get array of checked filters in Select\n  useEffect(() => {\n    handleSelect(types);\n  }, [types]);\n\n  // set checked to false by clicking Reset button\n  useEffect(() => {\n    setDefaultSelect(options, setCheck);\n  }, [reset]);\n\n  const handleChange = e => {\n    const { name: checkName, value, checked } = e.target;\n\n    // checked\n    setCheck({ ...check, [checkName]: checked });\n\n    // manage types status for filter\n    if (checked) {\n      setTypes({ [type]: [...types[type], value] });\n    } else {\n      setTypes({ [type]: types[type].filter(id => id !== value) });\n    }\n  };\n\n  function setDefaultSelect(arr, callback) {\n    const obj = {};\n    arr.forEach(item => {\n      obj[item] = false;\n    });\n    callback(obj);\n  }\n\n  return (\n    <>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"select-label\" className={classes.label}>\n          {name}\n        </InputLabel>\n        <MaterialSelect labelId=\"select-label\" id=\"input-select\">\n          {options.map(option => {\n            return (\n              <Checkbox\n                option={option}\n                key={option}\n                onChange={handleChange}\n                checked={check[option]}\n                name={option}\n              />\n            );\n          })}\n        </MaterialSelect>\n      </FormControl>\n    </>\n  );\n};\n\nSelect.propTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  reset: PropTypes.bool.isRequired,\n};\n\nexport default Select;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { Row, Col } from 'react-bootstrap';\nimport Select from '../Select/Select';\nimport css from './Options.module.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction filterDuplicate(arr) {\n  return arr.filter((elem, index, array) => array.indexOf(elem) === index);\n}\n\nconst INITIAL_STATE = {\n  publicationType: [],\n  termType: [],\n  reportGroup: [],\n  reportState: [],\n  reportFormat: [],\n};\n\nconst Options = ({ stat, handleFilter }) => {\n  const [form, setForm] = useState(INITIAL_STATE);\n  const [reset, setReset] = useState(false);\n\n  useEffect(() => {\n    handleFilter(form);\n  }, [form]);\n\n  const publicationTypes = filterDuplicate(\n    stat.map(data => data.publicationType),\n  );\n  const termTypes = filterDuplicate(stat.map(data => data.termType));\n  const reportGroups = filterDuplicate(stat.map(data => data.reportGroup));\n  const reportStates = filterDuplicate(stat.map(data => data.reportState));\n  const reportFormats = filterDuplicate(stat.map(data => data.reportFormat));\n\n  const handleSelect = value => {\n    setForm({ ...form, ...value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setForm(INITIAL_STATE);\n    setReset(!reset);\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <Row style={{ justifyContent: 'space-around', alignItems: 'flex-end' }}>\n          <Col xs={12} sm={6} md={2}>\n            <Select\n              type=\"publicationType\"\n              name=\"Тип публікації\"\n              options={publicationTypes}\n              handleSelect={handleSelect}\n              reset={reset}\n            />\n          </Col>\n          <Col xs={12} sm={6} md={2}>\n            <Select\n              type=\"termType\"\n              name=\"Періодичність\"\n              options={termTypes}\n              handleSelect={handleSelect}\n              reset={reset}\n            />\n          </Col>\n          <Col xs={12} sm={6} md={2}>\n            <Select\n              type=\"reportGroup\"\n              name=\"Категорія субєкта\"\n              options={reportGroups}\n              handleSelect={handleSelect}\n              reset={reset}\n            />\n          </Col>\n          <Col xs={12} sm={6} md={2}>\n            <Select\n              type=\"reportState\"\n              name=\"Статус\"\n              options={reportStates}\n              handleSelect={handleSelect}\n              reset={reset}\n            />\n          </Col>\n          <Col xs={12} sm={6} md={2}>\n            <Select\n              type=\"reportFormat\"\n              name=\"Тип Файлу\"\n              options={reportFormats}\n              handleSelect={handleSelect}\n              reset={reset}\n            />\n          </Col>\n          <Col xs={12} sm={12} md={2}>\n            <div style={{ textAlign: 'center' }}>\n              <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\n                СКИНУТИ\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      </form>\n    </>\n  );\n};\n\nOptions.propTypes = {\n  stat: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n\nexport default Options;\n"],"sourceRoot":""}